import os
import random
import slack
import hmac
from flask import Flask, request, abort


app = Flask(__name__)
doge_path = 'static/doges/'
client = slack.WebClient(token=os.getenv('SLACK_API_TOKEN'))
secret = os.getenv('GITHUB_WEBHOOK_SECRET')

# Check X-Hub-Signature to confirm that this webhook was generated by
# GitHub, and not a malicious third party.
#
# GitHub uses the WEBHOOK_SECRET, registered to the GitHub App, to
# create the hash signature sent in the `X-HUB-Signature` header of each
# webhook. This code computes the expected hash signature and compares it to
# the signature sent in the `X-HUB-Signature` header. If they don't match,
# this request is an attack, and you should reject it. GitHub uses the HMAC
# hexdigest to compute the signature. The `X-HUB-Signature` looks something
# like this: "sha1=123456".
# See https://developer.github.com/webhooks/securing/ for details.
@app.before_request
def verify_webhook_signature():
    their_signature_header = request.headers['X_HUB_SIGNATURE']
    if their_signature_header is None:
        abort(403)

    method, their_digest = their_signature_header.split('=')
    if method != 'sha1':
        abort(501)

    our_digest = hmac.new(bytes(secret, encoding='ascii'), msg=request.data, digestmod='sha1').hexdigest()
    if str(their_digest) != str(our_digest):
        abort(401)

    # The X-GITHUB-EVENT header provides the name of the event.
    # The action value indicates the which action triggered the event.
    app.logger.debug("---- received event %s", request.headers['X_GITHUB_EVENT'])


@app.route('/')
def hello_world():
    app.logger.debug('Hello, World!')
    response = client.chat_postMessage(
        channel='#general',
        text="Hello world!")
    assert response["ok"]
    assert response["message"]["text"] == "Hello world!"
    return 'Hello, World!'


@app.route('/event_handler', methods=["POST"])
def handle_review_submit():
    event = request.headers['X-GitHub-Event']
    app.logger.debug(event)
    payload = request.get_json()
    if event == 'pull_request_review' and payload['action'] == 'submitted':
        response = client.files_upload(
            channels='#general',
            file=doge_path + get_doge(),
            initial_comment='Thanks for the review!')
        assert response["ok"]
    return 'Hello, event!'


def get_doge():
    return random.choice(os.listdir(doge_path))
